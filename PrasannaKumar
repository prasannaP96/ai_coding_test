import os
import tensorflow as tf
from tensorflow import keras
import numpy as np
from tensorflow.keras import layers,models
import matplotlib.pyplot as plt
import glob

classes = ["Apple","Not a Apple"]

images_path = glob.glob(r"E:\coding_test\test\data\*.png")

data =[]
labels =[]

for i in images_path:
    image=tf.keras.preprocessing.image.load_img(i, color_mode='rgb', target_size= (250,250))
    image=np.array(image)
    data.append(image)
    labels.append(0)
    
data = np.array(data)
labels = np.array(labels)

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(data, labels, test_size=0.2,
                                                random_state=42)
                                                
model = models.Sequential([
    layers.Conv2D(filters=64, kernel_size=(3, 3), activation='relu', input_shape=(250, 250, 3)),
    layers.MaxPooling2D((3, 3)),
    
    layers.Conv2D(filters=32, kernel_size=(3, 3), activation='relu'),
    layers.MaxPooling2D((3, 3)),
    
    layers.Flatten(),
    layers.Dense(64, activation='relu'),
    layers.Dense(2, activation='softmax')
])

X_train = X_train/255.0
X_test = X_test/255.0

model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

model.fit(X_train,y_train,epochs=10)

model.evaluate(X_test,y_test)

direct = glob.glob(r"E:\coding_test\test\data\*.png")

for i in direct:
    image=tf.keras.preprocessing.image.load_img(i, color_mode='rgb', target_size= (250,250))
    image=np.array(image)
    image = image/255.0
    Y_predicted = np.argmax(model.predict(image.reshape(1,250,250,3)))
    print(classes[Y_predicted])
